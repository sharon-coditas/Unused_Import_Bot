package com.coditas.unusedImportsBot;/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import com.thoughtworks.qdox.JavaProjectBuilder;
import com.thoughtworks.qdox.model.JavaSource;

import javax.swing.*;
import java.io.*;
import java.nio.file.Paths;
import java.util.*;

import static com.coditas.unusedImportsBot.Bot.*;

/**
 *
 * @author Coditas
 */
public class BotV2 extends javax.swing.JFrame {

    /**
     * Creates new form swinggui
     */
    public BotV2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("ADD FOLDER FOR UNUSED IMPORTS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("ADD FOLDER FOR UNWANTED STRING");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jButton3.setText("ADD FOLDER FOR IF ELSE SCANNING");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        setTitle("Unused Import's Scanner Bot V1.1");
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(289, 289, 289)
                                                .addComponent(jButton1)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(29, 29, 29)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1317, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton1)
                                        .addComponent(jButton2)
                                        .addComponent(jButton3))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        UnusedImports();
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        UnwantedString();
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        IfElse();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BotV2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BotV2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BotV2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BotV2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BotV2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JTextArea jTextArea1;
    // End of variables declaration
    public static void UnusedImports() {
        {
            JFileChooser fc = new JFileChooser();
            fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int returnVal = fc.showOpenDialog(frame);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                try {
                    List<String> listFiles = findFiles(Paths.get(fc.getSelectedFile().getAbsolutePath()), "java");
                    List<String> detailsImport = new ArrayList<>();
                    detailsImport.add("UNUSED IMPORTS \n");
                    for (String filesContent : listFiles) {
                        JavaProjectBuilder builder = new JavaProjectBuilder();
                        builder.addSource(new File(filesContent));
                        detailsImport.add("File path: " + filesContent + "\n");
                        Collection<JavaSource> sources = builder.getSources();
                        String print;
                        for (JavaSource sourceString : sources) {
                            print = printUnusedImports(String.valueOf(sourceString));
                            detailsImport.add("Unused imports are: " + "\n" + print + "\n");
                        }
                        Reader inputString = new StringReader(String.valueOf(detailsImport));
                        jTextArea1.read(inputString, "READING FILE :-)");

                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                System.out.println("Operation is CANCELLED :(");
            }
        }
    }

    public static void UnwantedString() {
        {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int returnValue = fileChooser.showOpenDialog(frame);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                try {
                    List<String> listFiles = findFiles(Paths.get(fileChooser.getSelectedFile().getAbsolutePath()), "java");
                    List<String> detailsString = new ArrayList<>();
                    detailsString.add("UNWANTED STRING \n");
                    for (String filesContent : listFiles) {
                        JavaProjectBuilder builder = new JavaProjectBuilder();
                        builder.addSource(new File(filesContent));
                        Collection<JavaSource> sources = builder.getSources();
                        List<String> list = List.of(String.valueOf(sources).split("\""));
                        Set<String> uniqueWords = new HashSet<>(list);
                        for (String word : uniqueWords) {
                            if (Collections.frequency(list, word) > 1 && !word.isEmpty()) {
                                if (!word.startsWith(")"))
                                    detailsString.add("File path: " + filesContent + "\n");
                                detailsString.add("word that is repeated: \"" + word + "\" : " + "number of times repeated: " + Collections.frequency(list, word) + "\n");
                                detailsString.add("Trying adding Constants \n");

                            } else
                                detailsString.add("Congrats No Unwanted String");
                        }

                        Reader inputString = new StringReader(String.valueOf(detailsString));
                        jTextArea1.read(inputString, "READING FILE :-)");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                System.out.println("Operation is CANCELLED :(");
            }
        }
    }
    public static void IfElse() {
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnVal = fc.showOpenDialog(frame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                java.util.List<String> listFiles = findFiles(Paths.get(fc.getSelectedFile().getAbsolutePath()), "java");
                List<String> detailsString = new ArrayList<>();
                List<String> detailsImport = new ArrayList<>();
                detailsImport.add("UNUSED IMPORTS \n");
                for (String filesContent : listFiles) {
                    JavaProjectBuilder builder = new JavaProjectBuilder();
                    builder.addSource(new File(filesContent));
                    File file = new File(filesContent);
                    String[] ifStatement = null;
                    FileReader fr = new FileReader(file);
                    BufferedReader br = new BufferedReader(fr);
                    String str;
                    // Word to search
                    String search = "if";
                    String search2 = "else";
                    // Initializes the counter of word to zero
                    int count = 0;
                    // Read the contents of the file
                    while ((str = br.readLine()) != null) {
                        // Split the word using space
                        ifStatement = str.split(" ");
                        for (String word : ifStatement) {
                            //Searching for the word
                            if ((word.equals(search) && word.equals(search2)) || (word.equals(search))) {
                                // If present, increment the counter
                                count++;
                            }
                        }
                    }

                    if (count != 0) {
                        detailsString.add("File path: " + filesContent + "\n");
                        detailsString.add("The if statement is present \"" + count + "\" : " + "times in the file" + "\n");
                        detailsString.add("Use  switch case instead\n");
                    } else {
                        detailsString.add("The if statement doesn't exist in the file!");
                    }

                    fr.close();
                }
                Reader inputString = new StringReader(String.valueOf(detailsString));
                jTextArea1.read(inputString, "READING FILE :-)");


            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("Operation is CANCELLED :(");
        }
    }
    }


